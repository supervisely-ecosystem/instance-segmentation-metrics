table

box match, class match, TP, FP, FN
1,1,1,0,0
1,0,0,1(pred_cls),1(gt_cls)

0(gt not found),0,0,0,1
0(redindant pred),0,0,1,0

True
class mismatch
FN
FP

метрику можно разбить на:
- detection (matches)
- classification (P/R)
- mask accuracy (IoU)


boxes_pred, boxes_gt
ious
class

cls A

cls_pred, cls_gt, iou,      TP, FP, FN, cumTP, cumFP, P, R
A,A,0.7,                    1, 0, 0, 1, 0, 1.0, 1/P
A,B,0.5                     0, 1, 0, 1, 1, 0.5, 1/P
A,,,                        FP, 
,A,

P = len(boxes_gt)



Надо все таки использовать pycocotools:
(устанавливать нужные imgIds)
    per-class
    per-dataset
    overall

---

Как считать detection (matches)?
(не разбиваем на классы, class-agnostic)
    matches - TP, rest_gt - FN, rest_pred - FP
    Найдено объектов (Recall) 53/60 (TP/(TP+FN))
    Лишние объекты (FP): 5
    Не найдено (FN): 7


Как считать classification?
    TP - matched and True_class
    mis_cls - matched and False_class
    cls_accuracy: TP/(TP + mis_cls)
    confusion_matrix (matched and unmatched) (per object)


Per class:
    Recall for class i. Какие классы нашлись, matched and True_class: 12/15
    Precision for class i: 12/20 (TP/(TP+FP))
    AP
    Avg IoU


Per dataset:
    mAP
    Avg IoU
    Precision/Recall


Mask accuracy metrics:
(only for matched)
    Avg IoU (mean to all objects)
    mean IoU (counts IoU for each class separetely, then takes mean)
    table: avg IoU per class


Per Image:
	Avg mask IoU
	Count TP/FP/FN (classification)
	Per-object Table:
		IoU + class_match (True/False)


создаем pandas таблицу как выше

pycocotools:
    all
    per-class
    per-dataset

    